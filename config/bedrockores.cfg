# Configuration file

general {
    # Whether to allow players to directly mine bedrock ores. Disabling this will force players to use the bedrock miner.
    B:allowPlayerMining=false

    # The list of dimension *types* assigned to ore entries with no explicit dimension config. This includes the defaults for vanilla ores and non-dimension-specific mod ore defaults. Use this to make those ores also spawn in dimension types other than the overworld.
    S:defaultDimensionTypes <
     >

    # The fuel efficiency of the miner. Actual mining time is original mining time times this. Applies to both internal power generation as well as power supplied externally.
    # Min: 0.0
    # Max: 1.7976931348623157E308
    D:minerEfficiency=1.0

    # The power efficiency of the miner. Total mining time is original powered time times this times `minerEfficiency`. Applies to power supplied externally. Set to 0 to disable external powering.
    # Min: 0.0
    # Max: 1.7976931348623157E308
    D:minerEfficiencyExternalPower=1.0

    # The fuel efficiency of the miner. Total mining time is original burn time times this times `minerEfficiency`. Applies to internal power generation. Set to 0 to disable internal powering.
    # Min: 0.0
    # Max: 1.7976931348623157E308
    D:minerEfficiencyInternalPower=0.25

    # The time in ticks between extraction operations performed by the miner.
    # Min: 0
    # Max: 2147483647
    I:minerExtractionCooldown=100

    # Whether to support alpha transparency in ore mask, not just completely transparent/completely opaque. Only required when the resource pack in use provides such a custom mask. Slightly more expensive to render.
    B:oreMaskUsesAlpha=false

    # A blacklist to easily disable ore generation for individual mods. Useful when you want to disable ores with default configurations without adding an `enabled: false` entry for each one to a JSON config. This must be the mod IDs of the mods to disable, i.e. the bit in the block state name before the colon, e.g. `thermalfoundation`.
    S:oreModBlacklist <
     >

    # Controls the sort index the `groupOrder` field in a JSON config for ore gen evaluates to; specifically, the sort index will be the index in this list times five. So by default the sort index for ThermalFoundation ores will be 0 and the one for Immersive Engineering will be 10.
    S:orePriority <
        thermalfoundation
        ic2
        immersiveengineering
        techreborn
        forestry
        silentgems
        mekanism
     >

    # Maximum number of chunks to perform retrogen for per tick. 0 to disable retrogen.
    # Min: 0
    # Max: 2147483647
    I:retrogenSpeed=10

    # Whether to only show the floating UI indicating ore yield when sneaking.
    B:uiOnlyWhenSneaking=false

    # The y level at which to start looking for bedrock to generate veins in, searching down.
    # Min: 0
    # Max: 255
    I:veinBaseY=5

    # The probability that a bedrock vein spawns in a chunk. In other words, the relative amount of chunks a vein spawns in.
    # Min: 0.0
    # Max: 1.0
    D:veinChance=0.0

    # A constant scaling factor applied to distance based vein scaling. The final range based scaling is computed as 'logn((distanceToSpawn-veinYieldDistanceScaleStart)/10)*veinYieldDistanceScaleMultiplier'.
    # Min: 0.0
    # Max: 1.7976931348623157E308
    D:veinDistanceScaleMultiplier=2.0

    # The distance from spawn at which to start scaling up vein size and yield.
    # Min: 0.0
    # Max: 1.7976931348623157E308
    D:veinDistanceScaleStart=300.0

    # The minimum distance from spawn at which veins may spawn.
    # Min: 0.0
    # Max: 1.7976931348623157E308
    D:veinMinSpawnDistance=0.0

    # A constant scaling factor applied to all yields. Intended to allow easily changing yields in general, while not messing with the balancing of ores against each other.
    # Min: 0.0
    # Max: 10000.0
    D:veinYieldConstScale=2.0

    # The 'weight' of the world generator placing bedrock ores. This is used when Forge sorts generators to know in what order they run. Higher weights run later.
    I:worldGeneratorWeight=10
}


