# Configuration file

general {
    # Whether basic circuits should be produced in II or IE way
    B:changeCircuitProduction=true

    # The maximum frequency for advanced radios.
    I:radioAdvancedMaxFrequency=256

    # The maximum frequency for basic radios.
    I:radioBasicMaxFrequency=32

    # Should RPM be counted in real time or ingame time
    B:rpmRealTime=true

    ores {
        # A blacklist of dimensions in which IE ores won't spawn. By default this is the Overworld (0) and End (1)
        I:oreDimBlacklistNether <
            0
            1
         >

        # A blacklist of dimensions in which IE ores won't spawn. By default this is Nether (-1) and End (1)
        I:oreDimBlacklistNormal <
            -1
            1
         >

        # Generation config for Fluorite Ore.
        # Parameters: Vein size, lowest possible Y, highest possible Y, veins per chunk, chance for vein to spawn (out of 100). Set vein size to 0 to disable the generation
        I:ore_fluorite <
            0
            1
            55
            1
            10
         >

        # Generation config for Fluorite Ore.
        # Parameters: Vein size, lowest possible Y, highest possible Y, veins per chunk, chance for vein to spawn (out of 100). Set vein size to 0 to disable the generation
        I:ore_phosphorus <
            0
            1
            55
            1
            80
         >

        # Generation config for Platinum Ore.
        # Parameters: Vein size, lowest possible Y, highest possible Y, veins per chunk, chance for vein to spawn (out of 100). Set vein size to 0 to disable the generation
        I:ore_platinum <
            0
            0
            10
            2
            35
         >

        # Generation config for Salt Ore.
        # Parameters: Vein size, lowest possible Y, highest possible Y, veins per chunk, chance for vein to spawn (out of 100). Set vein size to 0 to disable the generation
        I:ore_salt <
            0
            55
            95
            1
            65
         >

        # Generation config for Tungsten Ore.
        # Parameters: Vein size, lowest possible Y, highest possible Y, veins per chunk, chance for vein to spawn (out of 100). Set vein size to 0 to disable the generation
        I:ore_tungsten <
            0
            0
            35
            2
            45
         >

        # Generation config for Zinc Ore.
        # Parameters: Vein size, lowest possible Y, highest possible Y, veins per chunk, chance for vein to spawn (out of 100). Set vein size to 0 to disable the generation
        I:ore_zinc <
            0
            35
            95
            2
            55
         >

        # Set this to true to allow retro-generation of Salt Ore.
        B:retrogen_fluorite=false

        # The retrogeneration key. Basically IE checks if this key is saved in the chunks data. If it isn't, it will perform retrogen on all ores marked for retrogen.
        # Change this in combination with the retrogen booleans to regen only some of the ores.
        S:retrogen_key=DEFAULT_II

        # Set this to false to disable the logging of the chunks that were flagged for retrogen.
        B:retrogen_log_flagChunk=true

        # Set this to false to disable the logging of the chunks that are still left to retrogen.
        B:retrogen_log_remaining=true

        # Set this to true to allow retro-generation of Salt Ore.
        B:retrogen_phosphorus=false

        # Set this to true to allow retro-generation of Platinum Ore.
        B:retrogen_platinum=false

        # Set this to true to allow retro-generation of Salt Ore.
        B:retrogen_salt=false

        # Set this to true to allow retro-generation of Tungsten Ore.
        B:retrogen_tungsten=false

        # Set this to true to allow retro-generation of Zinc Ore.
        B:retrogen_zinc=false
    }

    machines {

        radiostation {
            # Energy capacity of the radio station.
            I:energyCapacity=32000

            # Energy usage when sending a signal.
            I:energyUsage=8192

            # Energy usage when a radio station is working.
            I:energyUsageIdle=512

            # Range of the radio station (in which the signals can be received) in blocks from center (radius).
            I:radioRange=64

            # How much the range decreases when there is bad weather (rain, snow) ( 0 - full range, 0.5 - half range, 1 - no range, etc.)
            # Min: 0.0
            # Max: 1.0
            D:weatherHarshness=0.5
        }

        datainputmachine {
            # Energy capacity of the data input machine.
            I:energyCapacity=16000

            # Energy usage when sending a signal.
            I:energyUsage=2048

            # Energy per step of punching a tape (1/60 of the full energy needed).
            I:energyUsagePunchtape=128

            # Duration of tape punching process in ticks (1 tick = 1/20 Second).
            I:timePunchtapeProduction=160
        }

        arithmeticlogicmachine {
            # Energy capacity of the arithmetic-logic machine.
            I:energyCapacity=24000

            # Energy usage of the arithmetic-logic machine per circuit.
            I:energyUsage=2048
        }

        printingpress {
            # Energy capacity of the printing press.
            I:energyCapacity=24000

            # Energy usage of the printing press per page printed.
            I:energyUsage=512

            # Ink used per character printed (mB).
            I:printInkUsage=8

            # Page printing duration (in ticks).
            I:printTime=90
        }

        chemicalbath {
            # Energy capacity of the chemical bath.
            I:energyCapacity=16000

            # Fluid capacity of the chemical bath.
            I:fluidCapacity=24000
        }

        electrolyzer {
            # Energy capacity of the electrolyzer.
            I:energyCapacity=16000

            # Fluid capacity of the electrolyzer.
            I:fluidCapacity=12000
        }

        precissionassembler {
            # Energy capacity of the chemical bath.
            I:energyCapacity=16000

            # Hatch opening (or closing) time (in ticks)
            I:hatchTime=40
        }

        artilleryhowitzer {
            # How long does it take for the howitzer to move the shell by one item slot using conveyor (in ticks)
            I:conveyorTime=40

            # Energy capacity of the artillery howitzer.
            I:energyCapacity=1000000

            # Energy usage when loading / unloading a shell.
            I:energyUsageLoader=3192

            # Energy usage when moving / rotating the platform.
            I:energyUsagePlatform=1620

            # Time needed for the howitzer to fire (in ticks.
            I:fireTime=35

            # The speed of howitzer shells in blocks/tick
            D:howitzerVelocity=10.0

            # How long does it take for the howitzer to load a shell (in ticks)
            I:loadTime=140

            # Time needed for the platform to ascend/descend (in ticks.
            I:platformTime=240

            # How long does it take for the howitzer to rotate 90 degrees (in ticks)
            I:rotateTime=160
        }

        ammunitionfactory {
            I:casingTime=120
            I:componentCapacity=48
            I:componentIntake=6
            I:conveyorTime=50
            I:coreTime=160
            I:energyCapacity=32000
            I:energyUsageCasing=120
            I:energyUsageCore=120
            I:energyUsageGunpowder=120
            I:energyUsagePaint=120
            I:gunpowderTime=120
            I:paintTime=180
            I:paintUsage=120
        }

        ballisticcomputer {
            # Energy capacity of the ballistic computer.
            I:energyCapacity=24000

            # Energy capacity of the ballistic computer.
            I:energyUsage=16000
        }

        missilesilo {
            # Energy capacity of the missile silo (per one block of height).
            I:energyCapacity=2500000
        }

        conveyor_scanner {
            # Energy capacity of the scanning conveyor.
            I:energyCapacity=8000

            # Energy usage when scanning an ItemStack.
            I:energyUsage=128
        }

        inserter {
            # Energy capacity of the inserter.
            I:energyCapacity=2048

            # Energy usage of the inserter per item taken.
            I:energyUsage=128

            # How long does it take for the inserter to pick up an item (in ticks)
            I:grabTime=20

            # How long does it take for the inserter to rotate 90 degrees (in ticks)
            I:rotateTime=10
        }

        advanced_inserter {
            # Energy capacity of the inserter.
            I:energyCapacity=4096

            # Energy usage of the inserter per item taken.
            I:energyUsage=256

            # How long does it take for the inserter to pick up an item (in ticks)
            I:grabTime=10

            # How long does it take for the inserter to rotate 90 degrees (in ticks)
            I:rotateTime=5
        }

        fluid_inserter {
            # Energy capacity of the inserter.
            I:energyCapacity=2048

            # Energy usage of the inserter per item taken.
            I:energyUsage=128

            # Max fluid output (in milibuckets per tick)
            I:maxOutput=500
        }

        advanced_fluid_inserter {
            # Energy capacity of the inserter.
            I:energyCapacity=4096

            # Energy usage of the inserter per item taken.
            I:energyUsage=256

            # Max fluid output (in milibuckets per tick)
            I:maxOutput=240
        }

        chemical_dispenser {
            # Energy capacity of the chemical dispenser.
            I:energyCapacity=2048

            # Energy usage of the chemical dispenser per one shot.
            I:energyUsage=128

            # How long does it take for the chemical dispenser to rotate 45 degrees horizontally (in ticks)
            I:rotateHTime=240

            # How long does it take for the chemical dispenser to rotate 45 degrees vertically (in ticks)
            I:rotateVTime=180
        }

        small_data_buffer {
            # Amount of data packets the machine can store.
            I:packetCapacity=4
        }

        skycrate_station {
            # How long does it take for the minecart to drive into the station. (in ticks)
            I:crateInTime=60

            # How long does it take for the minecart to drive out of the station. (in ticks)
            I:crateOutTime=60

            # How long does it take for the station to put a crate onto a minecart. (in ticks)
            I:inputTime=240
            I:minecartInTime=60
            I:minecartOutTime=60

            # How long does it take for the station to put a crate onto the line. (in ticks)
            I:outputTime=240

            # Max rotations per minute (will break if over).
            I:rpmBreakingMax=240

            # Max rotations per minute (reaching over this level doesn't change effectiveness).
            I:rpmEffectiveMax=80

            # Rotations per minute required for the Skycrate Station to Work.
            I:rpmMin=20

            # Max Torque (will break if over).
            I:torqueBreakingMax=256

            # Max Torque (reaching over this level doesn't change effectiveness).
            I:torqueEffectiveMax=8

            # Torque required for the Skycrate Station to Work.
            I:torqueMin=4
        }

        packer {
            # Duration of the container being pushed by conveyor into and out of the center (in ticks).
            I:conveyorTime=60

            # Energy capacity of the glorious boxing device also known as The Packer.
            I:energyCapacity=16000

            # Energy usage of the packer (after dropping a stack inside).
            I:energyUsage=512

            # Duration of a single stack insertion process (in ticks).
            I:timeInsertion=5
        }

        redstoneinterface {
        }

        sawmill {
            # Max rotations per minute (will break if over).
            I:rpmBreakingMax=160

            # Rotations per minute required for the Sawmill to Work.
            I:rpmMin=20

            # Max Torque (will break if over).
            I:torqueBreakingMax=140

            # Torque required for the Sawmill to Work.
            I:torqueMin=6
        }

        skycart_station {
            # How long does it take for the minecart to drive into the station. (in ticks)
            I:minecartInTime=40

            # How long does it take for the minecart to drive out of the station. (in ticks)
            I:minecartOutTime=40
        }

        alarmsiren {
            # The distance the siren can be heard from.
            I:soundRange=16
        }

        speaker {
            # The distance the speaker can be heard from.
            I:soundRange=24
        }

        effectcrates {
            # The amount of energy an inserter upgraded Ammunition Crate takes per one 4 second effect (in IF/RF/FE)
            I:ammoCrateEnergyPerAction=85

            # The amount of energy an inserter upgraded crate can drain in one tick (in IF/RF/FE)
            I:energyDrain=40

            # The amount of energy an inserter upgraded crate can store (in IF/RF/FE)
            I:maxEnergyStored=4000

            # The amount of energy an inserter upgraded Medical Crate takes per one heal (in IF/RF/FE)
            I:mediCrateEnergyPerAction=50

            # The amount of fluid a Medical Crate can store (in mB)
            I:mediCrateTankSize=4000

            # The amount of energy an inserter upgraded Repair Crate takes per one repair (in IF/RF/FE)
            I:repairCrateEnergyPerAction=65
        }

    }

    mechanicaldevices {
        # Max length of the belt, works exactly like wires (measured in blocks).
        # Belts: Cloth, Steel
        I:belt_length <
            8
            16
         >

        # Belts will break if RPM is higher than this value.
        # Belts: Cloth, Steel
        I:belt_max_rpm <
            960
            3600
         >

        # Belts will break if Torque is higher than this value.
        # Belts: Cloth, Steel
        I:belt_max_torque <
            48
            640
         >

        # Torque loss, later multiplied by belt length.
        # Belts: Cloth, Steel
        D:belt_torque_loss <
            0.05000000074505806
            0.10000000149011612
         >

        # Default torque, used as a fallback, when IE rotational device is not recognised.
        D:dynamo_default_torque=2.0

        # Default torque, used as a fallback, when IE rotational device is not recognised.
        D:dynamo_watermill_torque=12.0

        # Torque multiplier for the windmill.
        D:dynamo_windmill_torque=8.0

        # Durability of the gear (decreases by 1 every 20 ticks (1 second)).
        # Gears: Copper, Brass, Iron, Steel, Tungsten
        I:gear_max_durability <
            2400
            4800
            7200
            14400
            28800
         >

        # Gears will break if RPM is higher than this value.
        # Gears: Copper, Brass, Iron, Steel, Tungsten
        I:gear_max_rpm <
            60
            200
            240
            800
            2400
         >

        # Gears will break if Torque is higher than this value.
        # Gears: Copper, Brass, Iron, Steel, Tungsten
        I:gear_max_torque <
            6
            24
            32
            256
            512
         >

        # Minimal RPM required by a gear to work.
        # Gears: Copper, Brass, Iron, Steel, Tungsten
        I:gear_min_rpm <
            10
            40
            120
            360
            720
         >

        # Immersive Flux to Rotary Flux conversion ratio (default 1 RoF = 1 RF).
        D:rof_conversion_ratio=1.0
    }

    tools {
        # The energy capacity of advanced binoculars (when using Infrared Sight).
        I:advanced_binoculars_energy_capacity=4000

        # The energy usage of advanced binoculars (when using Infrared Sight).
        I:advanced_binoculars_energy_usage=150

        # Max zoom of the advanced binoculars (in Blu's Unit of Distance Measurementâ„¢).
        D:advanced_binoculars_max_zoom <
            0.05000000074505806
            0.0625
            0.08330000191926956
            0.10000000149011612
            0.25
         >

        # A modifier to apply to the ammunition resupply time of the Ammunition Crate (weapons reload).
        D:ammunition_crate_resupply_time=1.0

        # Max zoom of the binoculars (in Blu's unit of distance measurementâ„¢).
        D:binoculars_max_zoom <
            0.10000000149011612
            0.125
            0.16699999570846558
            0.25
            0.5
         >

        # The energy capacity of the electric hammer in RF... i mean IF... i mean FE... that thing o' powerin'!.
        I:electric_hammer_capacity=24000

        # The energy usage of the electric hammer (when mining, rotating, etc. ).
        I:electric_hammer_energy_per_use=100

        # The energy usage of the electric hammer when building advanced multiblocks (per tick).
        I:electric_hammer_energy_per_use_construction=4096

        # The energy capacity of the electric multitool. (when it will be added)
        I:electric_multitool_capacity=100000

        # The energy capacity of the electric wirecutter.
        I:electric_wirecutter_capacity=24000

        # The energy usage of the electric wirecutter (when cutting wires).
        I:electric_wirecutter_energy_per_use=100

        # The energy capacity of the electric wrench.
        I:electric_wrench_capacity=24000

        # The energy usage of the electric wrench (when destroying blocks / accessing GUIs).
        I:electric_wrench_energy_per_use=100

        # The Lighter fuel capacity in milibuckets (mB).
        I:lighter_capacity=1000

        # The capacity of the measuring cup (mB).
        I:measuring_cup_capacity=500

        # The durability (max number of uses) of the Precission Buzzsaw.
        I:precission_tool_buzzsaw_durability=150

        # The usage time of the Precission Buzzsaw.
        I:precission_tool_buzzsaw_usage_time=140

        # The durability (max number of uses) of the Precission Drill.
        I:precission_tool_drill_durability=250

        # The usage time of the Precission Drill.
        I:precission_tool_drill_usage_time=140

        # The durability (max number of uses) of the Precission Hammer.
        I:precission_tool_hammer_durability=200

        # The usage time of the Precission Hammer.
        I:precission_tool_hammer_usage_time=40

        # The durability (max number of uses) of the Precission Inserter.
        I:precission_tool_inserter_durability=200

        # The usage time of the Precission Inserter.
        I:precission_tool_inserter_usage_time=60

        # The durability (max number of uses) of the Precission Solderer.
        I:precission_tool_solderer_durability=150

        # The usage time of the Precission Solderer.
        I:precission_tool_solderer_usage_time=80

        # The durability (max number of uses) of the Precission Welder.
        I:precission_tool_welder_durability=250

        # The usage time of the Precission Welder.
        I:precission_tool_welder_usage_time=160

        # The durability (max number of uses) of the Iron Sawblade.
        I:sawblade_iron_durability=150

        # The durability (max number of uses) of the Steel Sawblade.
        I:sawblade_steel_durability=300

        # The durability (max number of uses) of the Tungsten Sawblade.
        I:sawblade_tungsten_durability=550

        # The durability of the engineer's wrench.
        I:wrench_durability=256

        skycratemounts {
            # The energy capacity of the Electric Skycrate Mount (in Immersive Flux).
            D:electric_energy=55.0

            # The energy to distance ratio of the Electric Skycrate Mount. (in Immersive Flux per Meter)
            I:electric_energy_ratio=128

            # The speed of the Electric Skycrate Mount.
            D:electric_speed=1.0

            # The energy (max distance to be traveled) of the Mechanical Skycrate Mount.
            D:mech_energy=35.0

            # The speed of the Mechanical Skycrate Mount.
            D:mech_speed=0.25
        }

    }

    weapons {

        machinegun {
            # Setup time multiplier when the belt fed loader upgrade is mouted on mg.
            D:beltFedLoaderSetupTimeMultiplier=0.5

            # Time required to fire a single bullet in MG.
            I:bulletFireTime=4

            # Time required to reload a clip in MG.
            I:clipReloadTime=35

            # Recoil multiplier when the hasty bipod is mouted on mg.
            D:hastyBipodRecoilMultiplier=1.5

            # Setup time multiplier when the hasty bipod is mouted on mg.
            D:hastyBipodSetupTimeMultiplier=0.5

            # Fire rate multiplier when heavy barrel is mouted on mg.
            D:heavyBarrelFireRateMultiplier=0.25

            # Infrared scope energy usage per tick
            I:infraredScopeEnergyUsage=15

            # Max zoom of a machinegun with a scope mounted (in Blu's Unit of Distance Measurementâ„¢).
            D:machinegun_scope_max_zoom <
                0.05000000074505806
                0.08330000191926956
                0.15000000596046448
             >

            # Max scatter of heat, higher values will force the player to wait until the gun cools down.
            I:maxOverheat=100

            # Recoil multiplier when the precise bipod is mouted on mg.
            D:preciseBipodRecoilMultiplier=0.25

            # Setup time multiplier when the precise bipod is mouted on mg.
            D:preciseBipodSetupTimeMultiplier=2.0

            # Horizontal recoil after taking a shot with heavy barrel mounted.
            D:recoilHBHorizontal=1.25

            # Vertical recoil after taking a shot with heavy barrel mounted.
            D:recoilHBVertical=1.25

            # Amount of horizontal recoil after taking a shot.
            D:recoilHorizontal=4.0

            # Horizontal recoil multiplier when the double magazine upgrade is mouted on mg.
            D:recoilSecondMagazine=1.649999976158142

            # Amount of vertical recoil after taking a shot.
            D:recoilVertical=4.0

            # Time required to set up the MG (in ticks).
            I:setupTime=100

            # Setup time multiplier when a shield is mouted on mg.
            D:shieldSetupTimeMultiplier=0.5

            # Shield's initial strength (resistance vs attacks).
            D:shieldStrengthInitial=45.0
            D:waterCoolingFireRateMultiplier=1.5

            # Water usage when water cooling upgrade is mounted on mg (in mB).
            I:waterCoolingFluidUsage=40

            # Coolant tank capacity of the water cooling upgrade.
            I:waterCoolingTankCapacity=4000
        }

        submachinegun {
            # Time required to reload a magazine in SMG.
            I:aimTime=10

            # Time required to fire a single bullet.
            I:bulletFireTime=2

            # Whether the recoil is visible in first-person view.
            B:cameraRecoil=true

            # Time required to reload a magazine in SMG.
            I:clipReloadTime=45

            # Maximum amount of horizontal recoil.
            D:maxRecoilHorizontal=30.0

            # Maximum amount of vertical recoil.
            D:maxRecoilVertical=45.0

            # Amount of horizontal recoil after taking a shot.
            D:recoilHorizontal=3.0

            # Amount of vertical recoil after taking a shot.
            D:recoilVertical=4.0
        }

        emplacementweapons {

            autocannon {
                # Time required to fire a single bullet from all the cannons.
                I:bulletFireTime=10

                # Time required to reload all the magazines.
                I:reloadTime=340
            }

        }

        railgun {
            # Make standard railgun rods to be able to penetrate mobs (depending on metal).
            B:enablePenetration=true
        }

        grenade {
            # Changes looks of the grenades
            # 0 - new look
            # 1 - old look, but cores are colored
            # 2 - old look
            # Min: 0
            # Max: 2
            I:classicGrenades=0
        }

    }

    wires {
        # The RGB color of the data wire.
        I:dataWireColouration=11784662

        # The maximum length of a single data wire.
        I:dataWireLength=24

        # The RGB color of the small data wire.
        I:smallDataWireColouration=11784662

        # The maximum length of a single small data wire. Should not be much.
        I:smallDataWireLength=4

        # The RGB color of the small data wire.
        I:smallRedstoneWireColouration=16723759

        # The maximum length of a single small data wire. Should not be much.
        I:smallRedstoneWireLength=4
    }

    vehicles {

        motorbike {
            # Roll the camera when turning the motorbike.
            B:cameraRoll=false

            # Damage resistance of the engine.
            I:engineDurability=100

            # Amount of fuel burn per time, dependent on diesel generator fluids (in mB)
            I:fuelBurnAmount=8

            # Fuel capacity of the motorbike.
            I:fuelCapacity=12000

            # Damage resistance of the fuel tank.
            I:fuelTankDurability=80

            # Fuel usage per one meter driven.
            I:fuelUsage=6

            # Damage resistance of the wheels.
            I:wheelDurability=40
        }

    }

    ##########################################################################################################
    # compat
    #--------------------------------------------------------------------------------------------------------#
    # A list of all mods that IEn has integrated compatability for
    # Setting any of these to false disables the respective compat
    ##########################################################################################################

    compat {
        B:immersivepetroleum=true
    }

}


